
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parse;

import ErrorMsg.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Grammar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Grammar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Grammar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Grammar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\006\000\002\002\005\000" +
    "\002\002\006\000\002\002\010\000\002\002\003\000\002" +
    "\002\006\000\002\002\012\000\002\002\003\000\002\002" +
    "\007\000\002\002\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\007\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\007\000\002" +
    "\014\004\000\002\014\002\000\002\010\003\000\002\010" +
    "\007\000\002\010\003\000\002\024\007\000\002\030\013" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\013\003\000\002\013\002\000\002\015\004\000\002" +
    "\015\002\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\017\002\000\002\020\005\000\002\020\002" +
    "\000\002\021\006\000\002\021\002\000\002\022\007\000" +
    "\002\022\002\000\002\011\004\000\002\011\002\000\002" +
    "\025\003\000\002\025\002\000\002\031\003\000\002\031" +
    "\002\000\002\027\006\000\002\027\002\000\002\023\007" +
    "\000\002\023\002\000\002\026\004\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\032\003\022\004\014\005\016\006\004\012" +
    "\012\022\021\037\011\042\006\043\025\046\023\052\017" +
    "\053\013\001\002\000\070\002\uffff\007\uffff\011\uffff\013" +
    "\uffff\015\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\040\uffff\041\uffff\044\uffff\045\uffff\047\uffff" +
    "\050\uffff\054\uffff\055\uffff\056\uffff\001\002\000\074\002" +
    "\ufffd\007\ufffd\011\ufffd\013\ufffd\015\ufffd\017\ufffd\020\226" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\225" +
    "\040\ufffd\041\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\001\002\000\032\003\022\004\014" +
    "\005\016\006\004\012\012\022\021\037\011\042\006\043" +
    "\025\046\023\052\017\053\013\001\002\000\076\002\uffee" +
    "\007\uffee\011\uffee\013\uffee\014\216\015\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\040\uffee\041\uffee\044\uffee\045\uffee\047\uffee\050\uffee" +
    "\054\uffee\055\uffee\056\uffee\001\002\000\070\002\ufffc\007" +
    "\ufffc\011\ufffc\013\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\040\ufffc\041\ufffc\044\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\054\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\032\003\022\004\014\005\016\006\004\012\012" +
    "\022\021\037\011\042\006\043\025\046\023\052\017\053" +
    "\013\001\002\000\034\003\022\004\014\005\016\006\004" +
    "\012\012\013\uffce\022\021\037\011\042\006\043\025\046" +
    "\023\052\017\053\013\001\002\000\070\002\ufffe\007\ufffe" +
    "\011\ufffe\013\ufffe\015\ufffe\017\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\034\ufffe\040\ufffe\041\ufffe\044\ufffe\045" +
    "\ufffe\047\ufffe\050\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002" +
    "\000\102\002\ufff0\007\ufff0\011\ufff0\012\157\013\ufff0\014" +
    "\156\015\ufff0\016\155\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\070\002\ufff6\007\ufff6\011\ufff6\013\ufff6" +
    "\015\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000\070\002\000" +
    "\007\000\011\000\013\000\015\000\017\000\021\000\022" +
    "\000\023\000\024\000\025\000\026\000\027\000\030\000" +
    "\031\000\032\000\033\000\034\000\040\000\041\000\044" +
    "\000\045\000\047\000\050\000\054\000\055\000\056\000" +
    "\001\002\000\070\002\ufff3\007\ufff3\011\ufff3\013\ufff3\015" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\001\002\000\034\002\154\021" +
    "\037\022\032\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\031\034\045\001\002\000" +
    "\032\003\022\004\014\005\016\006\004\012\012\022\021" +
    "\037\011\042\006\043\025\046\023\052\017\053\013\001" +
    "\002\000\070\002\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\040\ufff1\041\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\001\002\000\012\047\uffc2\054\075" +
    "\055\071\056\076\001\002\000\076\002\uffef\007\uffef\011" +
    "\uffef\013\uffef\014\065\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef" +
    "\041\uffef\044\uffef\045\uffef\047\uffef\050\uffef\054\uffef\055" +
    "\uffef\056\uffef\001\002\000\004\004\026\001\002\000\004" +
    "\035\027\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\034\021\037\022\032\023" +
    "\043\024\033\025\040\026\036\027\044\030\041\031\042" +
    "\032\034\033\031\034\045\044\035\001\002\000\032\003" +
    "\022\004\014\005\016\006\004\012\012\022\021\037\011" +
    "\042\006\043\025\046\023\052\017\053\013\001\002\000" +
    "\032\003\022\004\014\005\016\006\004\012\012\022\021" +
    "\037\011\042\006\043\025\046\023\052\017\053\013\001" +
    "\002\000\032\003\022\004\014\005\016\006\004\012\012" +
    "\022\021\037\011\042\006\043\025\046\023\052\017\053" +
    "\013\001\002\000\032\003\022\004\014\005\016\006\004" +
    "\012\012\022\021\037\011\042\006\043\025\046\023\052" +
    "\017\053\013\001\002\000\032\003\022\004\014\005\016" +
    "\006\004\012\012\022\021\037\011\042\006\043\025\046" +
    "\023\052\017\053\013\001\002\000\032\003\022\004\014" +
    "\005\016\006\004\012\012\022\021\037\011\042\006\043" +
    "\025\046\023\052\017\053\013\001\002\000\032\003\022" +
    "\004\014\005\016\006\004\012\012\022\021\037\011\042" +
    "\006\043\025\046\023\052\017\053\013\001\002\000\032" +
    "\003\022\004\014\005\016\006\004\012\012\022\021\037" +
    "\011\042\006\043\025\046\023\052\017\053\013\001\002" +
    "\000\032\003\022\004\014\005\016\006\004\012\012\022" +
    "\021\037\011\042\006\043\025\046\023\052\017\053\013" +
    "\001\002\000\032\003\022\004\014\005\016\006\004\012" +
    "\012\022\021\037\011\042\006\043\025\046\023\052\017" +
    "\053\013\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\032\003\022\004\014\005" +
    "\016\006\004\012\012\022\021\037\011\042\006\043\025" +
    "\046\023\052\017\053\013\001\002\000\032\003\022\004" +
    "\014\005\016\006\004\012\012\022\021\037\011\042\006" +
    "\043\025\046\023\052\017\053\013\001\002\000\070\002" +
    "\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd\017\uffdd\021\037" +
    "\022\032\023\043\024\033\025\040\026\036\027\044\030" +
    "\041\031\042\032\034\033\uffdd\034\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\001\002\000\054\002\uffe3\007\uffe3\011\uffe3\013\uffe3" +
    "\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\033" +
    "\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\047\uffe3" +
    "\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\070\002" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\040\026\036\027\044\030" +
    "\041\031\042\032\034\033\uffe7\034\uffe7\040\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\054\002\uffe1\007\uffe1\011\uffe1\013\uffe1" +
    "\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\033" +
    "\uffe1\034\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\054\002" +
    "\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\033\uffe2\034\uffe2\040\uffe2\041" +
    "\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\001\002\000\054\002\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\033\uffe5\034\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047" +
    "\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\070" +
    "\002\uffe9\007\uffe9\011\uffe9\013\uffe9\015\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\uffe9\034\uffe9\040\uffe9\041" +
    "\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\054\002\uffe4\007\uffe4\011\uffe4\013" +
    "\uffe4\015\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\033\uffe4\034\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000\034" +
    "\021\037\022\032\023\043\024\033\025\040\026\036\027" +
    "\044\030\041\031\042\032\034\033\031\034\045\045\057" +
    "\001\002\000\032\003\022\004\014\005\016\006\004\012" +
    "\012\022\021\037\011\042\006\043\025\046\023\052\017" +
    "\053\013\001\002\000\070\002\ufff4\007\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\017\ufff4\021\037\022\032\023\043\024\033" +
    "\025\040\026\036\027\044\030\041\031\042\032\034\033" +
    "\031\034\045\040\ufff4\041\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000\054\002" +
    "\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\033\uffe0\034\uffe0\040\uffe0\041" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\070\002\uffe6\007\uffe6\011\uffe6\013" +
    "\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\040\026\036\027\044\030\041\031\042\032\034\033" +
    "\uffe6\034\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\070\002" +
    "\uffe8\007\uffe8\011\uffe8\013\uffe8\015\uffe8\017\uffe8\021\uffe8" +
    "\022\uffe8\023\043\024\033\025\040\026\036\027\044\030" +
    "\041\031\042\032\034\033\uffe8\034\uffe8\040\uffe8\041\uffe8" +
    "\044\uffe8\045\uffe8\047\uffe8\050\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\070\002\uffde\007\uffde\011\uffde\013\uffde" +
    "\015\uffde\017\uffde\021\037\022\032\023\043\024\033\025" +
    "\040\026\036\027\044\030\041\031\042\032\034\033\uffde" +
    "\034\uffde\040\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050" +
    "\uffde\054\uffde\055\uffde\056\uffde\001\002\000\032\003\022" +
    "\004\014\005\016\006\004\012\012\022\021\037\011\042" +
    "\006\043\025\046\023\052\017\053\013\001\002\000\034" +
    "\015\067\021\037\022\032\023\043\024\033\025\040\026" +
    "\036\027\044\030\041\031\042\032\034\033\031\034\045" +
    "\001\002\000\076\002\uffeb\007\uffeb\011\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb\044\uffeb" +
    "\045\uffeb\047\uffeb\050\uffeb\054\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\012\047\uffd7\054\uffd7\055\uffd7\056\uffd7\001\002" +
    "\000\004\004\147\001\002\000\012\047\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\004\047\140\001\002\000\012" +
    "\047\uffc2\054\075\055\071\056\076\001\002\000\004\004" +
    "\124\001\002\000\004\004\077\001\002\000\004\025\100" +
    "\001\002\000\010\004\101\016\102\036\104\001\002\000" +
    "\012\047\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000\006" +
    "\004\111\017\uffbc\001\002\000\012\047\uffc0\054\uffc0\055" +
    "\uffc0\056\076\001\002\000\004\051\105\001\002\000\004" +
    "\004\106\001\002\000\012\047\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\001\002\000\012\047\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\012\047\uffc1\054\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\004\010\114\001\002\000\004\017\113\001\002" +
    "\000\012\047\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000" +
    "\004\004\115\001\002\000\010\007\116\013\uffba\017\uffba" +
    "\001\002\000\004\004\120\001\002\000\006\013\uffbd\017" +
    "\uffbd\001\002\000\004\010\121\001\002\000\004\004\122" +
    "\001\002\000\010\007\116\013\uffba\017\uffba\001\002\000" +
    "\006\013\uffbb\017\uffbb\001\002\000\004\012\125\001\002" +
    "\000\006\004\111\013\uffbc\001\002\000\004\013\127\001" +
    "\002\000\006\010\131\025\uffb8\001\002\000\004\025\133" +
    "\001\002\000\004\004\132\001\002\000\006\025\uffb9\035" +
    "\uffb9\001\002\000\032\003\022\004\014\005\016\006\004" +
    "\012\012\022\021\037\011\042\006\043\025\046\023\052" +
    "\017\053\013\001\002\000\042\021\037\022\032\023\043" +
    "\024\033\025\040\026\036\027\044\030\041\031\042\032" +
    "\034\033\031\034\045\047\uffbe\054\075\055\uffbe\056\uffbe" +
    "\001\002\000\012\047\uffd5\054\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\012\047\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002" +
    "\000\004\047\uffc3\001\002\000\034\003\022\004\014\005" +
    "\016\006\004\012\012\022\021\037\011\042\006\043\025" +
    "\046\023\050\uffce\052\017\053\013\001\002\000\040\011" +
    "\145\013\uffcc\021\037\022\032\023\043\024\033\025\040" +
    "\026\036\027\044\030\041\031\042\032\034\033\031\034" +
    "\045\050\uffcc\001\002\000\004\050\143\001\002\000\070" +
    "\002\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\040\ufff2\041" +
    "\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\001\002\000\006\013\uffcf\050\uffcf\001\002\000" +
    "\036\003\022\004\014\005\016\006\004\012\012\013\uffce" +
    "\022\021\037\011\042\006\043\025\046\023\050\uffce\052" +
    "\017\053\013\001\002\000\006\013\uffcd\050\uffcd\001\002" +
    "\000\006\010\131\035\uffb8\001\002\000\004\035\151\001" +
    "\002\000\032\003\022\004\014\005\016\006\004\012\012" +
    "\022\021\037\011\042\006\043\025\046\023\052\017\053" +
    "\013\001\002\000\042\021\037\022\032\023\043\024\033" +
    "\025\040\026\036\027\044\030\041\031\042\032\034\033" +
    "\031\034\045\047\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002" +
    "\000\070\002\uffdf\007\uffdf\011\uffdf\013\uffdf\015\uffdf\017" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\040" +
    "\uffdf\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\001\002\000\004\002\001\001\002\000" +
    "\006\004\173\017\uffc6\001\002\000\032\003\022\004\014" +
    "\005\016\006\004\012\012\022\021\037\011\042\006\043" +
    "\025\046\023\052\017\053\013\001\002\000\034\003\022" +
    "\004\014\005\016\006\004\012\012\013\uffca\022\021\037" +
    "\011\042\006\043\025\046\023\052\017\053\013\001\002" +
    "\000\004\013\166\001\002\000\036\007\163\013\uffc8\021" +
    "\037\022\032\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\031\034\045\001\002\000" +
    "\004\013\uffcb\001\002\000\032\003\022\004\014\005\016" +
    "\006\004\012\012\022\021\037\011\042\006\043\025\046" +
    "\023\052\017\053\013\001\002\000\036\007\163\013\uffc8" +
    "\021\037\022\032\023\043\024\033\025\040\026\036\027" +
    "\044\030\041\031\042\032\034\033\031\034\045\001\002" +
    "\000\004\013\uffc9\001\002\000\070\002\ufffa\007\ufffa\011" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa" +
    "\047\ufffa\050\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\034\015\170\021\037\022\032\023\043\024\033\025\040" +
    "\026\036\027\044\030\041\031\042\032\034\033\031\034" +
    "\045\001\002\000\100\002\uffed\007\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed\044" +
    "\uffed\045\uffed\047\uffed\050\uffed\051\171\054\uffed\055\uffed" +
    "\056\uffed\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\070\002\ufff7\007\ufff7\011" +
    "\ufff7\013\ufff7\015\ufff7\017\ufff7\021\037\022\032\023\043" +
    "\024\033\025\040\026\036\027\044\030\041\031\042\032" +
    "\034\033\031\034\045\040\ufff7\041\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\050\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000" +
    "\004\025\176\001\002\000\004\017\175\001\002\000\070" +
    "\002\ufff8\007\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\036\007\201\017\uffc4\021" +
    "\037\022\032\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\031\034\045\001\002\000" +
    "\004\017\uffc7\001\002\000\004\004\202\001\002\000\004" +
    "\025\203\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\036\007\201\017\uffc4\021" +
    "\037\022\032\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\031\034\045\001\002\000" +
    "\004\017\uffc5\001\002\000\004\013\207\001\002\000\070" +
    "\002\ufff9\007\ufff9\011\ufff9\013\ufff9\015\ufff9\017\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\040\ufff9\041" +
    "\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\001\002\000\034\021\037\022\032\023\043\024" +
    "\033\025\040\026\036\027\044\030\041\031\042\032\034" +
    "\033\031\034\045\040\211\001\002\000\032\003\022\004" +
    "\014\005\016\006\004\012\012\022\021\037\011\042\006" +
    "\043\025\046\023\052\017\053\013\001\002\000\070\002" +
    "\uffda\007\uffda\011\uffda\013\uffda\015\uffda\017\uffda\021\037" +
    "\022\032\023\043\024\033\025\040\026\036\027\044\030" +
    "\041\031\042\032\034\033\031\034\045\040\uffda\041\214" +
    "\044\uffda\045\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\070\002\uffdc\007\uffdc\011\uffdc\013\uffdc" +
    "\015\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\032\003\022" +
    "\004\014\005\016\006\004\012\012\022\021\037\011\042" +
    "\006\043\025\046\023\052\017\053\013\001\002\000\070" +
    "\002\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\021" +
    "\037\022\032\023\043\024\033\025\040\026\036\027\044" +
    "\030\041\031\042\032\034\033\031\034\045\040\uffdb\041" +
    "\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\001\002\000\032\003\022\004\014\005\016\006" +
    "\004\012\012\022\021\037\011\042\006\043\025\046\023" +
    "\052\017\053\013\001\002\000\034\015\220\021\037\022" +
    "\032\023\043\024\033\025\040\026\036\027\044\030\041" +
    "\031\042\032\034\033\031\034\045\001\002\000\076\002" +
    "\uffec\007\uffec\011\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\040\uffec\041\uffec\044\uffec\045\uffec\047\uffec\050" +
    "\uffec\054\uffec\055\uffec\056\uffec\001\002\000\034\021\037" +
    "\022\032\023\043\024\033\025\040\026\036\027\044\030" +
    "\041\031\042\032\034\033\031\034\045\045\222\001\002" +
    "\000\116\002\uffd0\003\022\004\014\005\016\006\004\007" +
    "\uffd0\011\uffd0\012\012\013\uffd0\015\uffd0\017\uffd0\021\uffd0" +
    "\022\021\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\037\011\040\uffd0" +
    "\041\uffd0\042\006\043\025\044\uffd0\045\uffd0\046\023\047" +
    "\uffd0\050\uffd0\052\017\053\013\054\uffd0\055\uffd0\056\uffd0" +
    "\001\002\000\070\002\ufff5\007\ufff5\011\ufff5\013\ufff5\015" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\001\002\000\070\002\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\015\uffd1\017\uffd1\021\037\022\032" +
    "\023\043\024\033\025\040\026\036\027\044\030\041\031" +
    "\042\032\034\033\031\034\045\040\uffd1\041\uffd1\044\uffd1" +
    "\045\uffd1\047\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1\001" +
    "\002\000\032\003\022\004\014\005\016\006\004\012\012" +
    "\022\021\037\011\042\006\043\025\046\023\052\017\053" +
    "\013\001\002\000\004\004\227\001\002\000\076\002\uffea" +
    "\007\uffea\011\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\040\uffea\041\uffea\044\uffea\045\uffea\047\uffea\050\uffea" +
    "\054\uffea\055\uffea\056\uffea\001\002\000\070\002\ufffb\007" +
    "\ufffb\011\ufffb\013\ufffb\015\ufffb\017\ufffb\021\037\022\032" +
    "\023\043\024\033\025\040\026\036\027\044\030\041\031" +
    "\042\032\034\033\031\034\045\040\ufffb\041\ufffb\044\ufffb" +
    "\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\016\002\017\003\007\004\014\005\004\006" +
    "\023\007\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\220\003\007\004\014\005\004\006\023\007" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\207\003\007\004\014\005\004\006\023\007\006\001" +
    "\001\000\020\002\140\003\007\004\014\005\004\006\023" +
    "\007\006\015\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\152\003\007\004\014\005" +
    "\004\006\023\007\006\001\001\000\002\001\001\000\012" +
    "\010\073\011\072\024\071\030\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\027" +
    "\003\007\004\014\005\004\006\023\007\006\001\001\000" +
    "\002\001\001\000\016\002\063\003\007\004\014\005\004" +
    "\006\023\007\006\001\001\000\016\002\062\003\007\004" +
    "\014\005\004\006\023\007\006\001\001\000\016\002\061" +
    "\003\007\004\014\005\004\006\023\007\006\001\001\000" +
    "\016\002\060\003\007\004\014\005\004\006\023\007\006" +
    "\001\001\000\016\002\055\003\007\004\014\005\004\006" +
    "\023\007\006\001\001\000\016\002\054\003\007\004\014" +
    "\005\004\006\023\007\006\001\001\000\016\002\053\003" +
    "\007\004\014\005\004\006\023\007\006\001\001\000\016" +
    "\002\052\003\007\004\014\005\004\006\023\007\006\001" +
    "\001\000\016\002\051\003\007\004\014\005\004\006\023" +
    "\007\006\001\001\000\016\002\050\003\007\004\014\005" +
    "\004\006\023\007\006\001\001\000\016\002\047\003\007" +
    "\004\014\005\004\006\023\007\006\001\001\000\016\002" +
    "\046\003\007\004\014\005\004\006\023\007\006\001\001" +
    "\000\016\002\045\003\007\004\014\005\004\006\023\007" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\057\003\007\004\014\005\004\006\023\007" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\065\003\007\004\014\005\004\006\023\007\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\073\011\136\024\071\030\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\102" +
    "\001\001\000\002\001\001\000\004\027\111\001\001\000" +
    "\006\024\107\025\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\125\001\001\000\002\001\001\000\004" +
    "\026\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\133\003\007\004\014\005\004" +
    "\006\023\007\006\001\001\000\006\030\135\031\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\140\003\007\004\014\005\004\006\023\007" +
    "\006\015\141\001\001\000\004\016\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\140\003\007\004\014\005\004\006\023\007\006\015\145" +
    "\001\001\000\002\001\001\000\004\026\147\001\001\000" +
    "\002\001\001\000\016\002\151\003\007\004\014\005\004" +
    "\006\023\007\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\173\001\001\000\016" +
    "\002\166\003\007\004\014\005\004\006\023\007\006\001" +
    "\001\000\020\002\160\003\007\004\014\005\004\006\023" +
    "\007\006\017\157\001\001\000\002\001\001\000\004\020" +
    "\161\001\001\000\002\001\001\000\016\002\163\003\007" +
    "\004\014\005\004\006\023\007\006\001\001\000\004\020" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\171\003\007\004" +
    "\014\005\004\006\023\007\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\176\003\007\004\014\005\004\006\023\007\006" +
    "\001\001\000\004\022\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\203\003\007" +
    "\004\014\005\004\006\023\007\006\001\001\000\004\022" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\211\003\007\004" +
    "\014\005\004\006\023\007\006\001\001\000\004\014\212" +
    "\001\001\000\002\001\001\000\016\002\214\003\007\004" +
    "\014\005\004\006\023\007\006\001\001\000\002\001\001" +
    "\000\016\002\216\003\007\004\014\005\004\006\023\007" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\223\003\007\004\014\005\004\006" +
    "\023\007\006\013\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\227\003\007\004\014\005\004\006" +
    "\023\007\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grammar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grammar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grammar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ErrorMsg errorMsg;

    public Grammar(java.io.Reader input, ErrorMsg err) {
        super(new Yylex(input));
        errorMsg = err;
    }

    public Grammar(java.io.Reader input) {
        super(new Yylex(input));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Grammar$actions {


    static Symbol.Symbol sym(String s) {
        return Symbol.Symbol.symbol(s);
    }

  private final Grammar parser;

  /** Constructor */
  CUP$Grammar$actions(Grammar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Grammar$do_action_part00000000(
    int                        CUP$Grammar$act_num,
    java_cup.runtime.lr_parser CUP$Grammar$parser,
    java.util.Stack            CUP$Grammar$stack,
    int                        CUP$Grammar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grammar$result;

      /* select the action based on the action number */
      switch (CUP$Grammar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		RESULT = start_val;
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Grammar$parser.done_parsing();
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Exp ::= STRING 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp ::= INT 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.IntExp(nleft, n); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= NIL 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.NilExp(nleft); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= Var 
            {
              Absyn.Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp ::= Opr_Exp 
            {
              Absyn.Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.OpExp o = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = o; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= Var ASSIGN Exp 
            {
              Absyn.Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.AssignExp(vleft, v, e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp ::= ID LPAREN Args RPAREN 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.ExpList a = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.CallExp(nleft, sym(n), a); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp ::= LPAREN Seq RPAREN 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.ExpList l = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.SeqExp(sleft, l); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= ID LBRACE FieldExpList RBRACE 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.FieldExpList f = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.RecordExp(nleft, sym(n), f); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= ID LBRACK Exp RBRACK OF Exp 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ArrayExp(nleft, sym(n), e1, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= If_Exp 
            {
              Absyn.Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.IfExp i = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT=i; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= WHILE Exp DO ExpQ 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.WhileExp(sleft, e1, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= FOR ID ASSIGN Exp TO Exp DO Exp 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ForExp(sleft, new Absyn.VarDec(ileft, sym(i), null, e1), e2, e3); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp ::= BREAK 
            {
              Absyn.Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.BreakExp(nleft); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= LET DecLst IN Seq END 
            {
              Absyn.Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.DecList l = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.ExpList b = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.LetExp(sleft, l, new Absyn.SeqExp(bleft, b)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= error 
            {
              Absyn.Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Exp",0, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var ::= ID 
            {
              Absyn.Var RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Var",3, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Var ::= Sub_Var 
            {
              Absyn.Var RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.SubscriptVar s = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = s; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Var",3, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Var ::= Fld_Var 
            {
              Absyn.Var RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FieldVar f = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = f; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Var",3, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sub_Var ::= ID LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(vleft, new Absyn.SimpleVar(vleft, sym(v)), e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Sub_Var",4, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sub_Var ::= Fld_Var LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.FieldVar f = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(fleft, f, e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Sub_Var",4, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sub_Var ::= Sub_Var LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.SubscriptVar s = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(sleft, s, e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Sub_Var",4, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Fld_Var ::= Var DOT ID 
            {
              Absyn.FieldVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FieldVar(vleft, v, sym(n)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Fld_Var",5, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Opr_Exp ::= Exp PLUS Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Opr_Exp ::= Exp MINUS Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Opr_Exp ::= Exp TIMES Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Opr_Exp ::= Exp DIVIDE Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Opr_Exp ::= Exp EQ Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Opr_Exp ::= Exp NEQ Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.NE, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Opr_Exp ::= Exp LT Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LT, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Opr_Exp ::= Exp LE Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LE, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Opr_Exp ::= Exp GT Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GT, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Opr_Exp ::= Exp GE Exp 
            {
              Absyn.OpExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GE, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Opr_Exp ::= MINUS Exp 
            {
              Absyn.OpExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.OpExp(sleft, new Absyn.IntExp(sleft,0), Absyn.OpExp.MINUS, e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Opr_Exp",1, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // If_Exp ::= Exp AND Exp 
            {
              Absyn.IfExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(e1left, 0)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("If_Exp",2, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // If_Exp ::= Exp OR Exp 
            {
              Absyn.IfExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(e1left, 1), e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("If_Exp",2, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // If_Exp ::= IF Exp THEN Exp Else 
            {
              Absyn.IfExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.IfExp(sleft, e1, e2, e3); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("If_Exp",2, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Else ::= ELSE Exp 
            {
              Absyn.Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = e; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Else ::= 
            {
              Absyn.Exp RESULT =null;

              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Else",10, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Dec ::= TyDec 
            {
              Absyn.Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = t; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Dec ::= VAR ID TyCast ASSIGN Exp 
            {
              Absyn.Dec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.VarDec(sleft, sym(n), t, e); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Dec ::= FunDec 
            {
              Absyn.Dec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = f; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TyDec ::= TYPE ID EQ Ty RTyDec 
            {
              Absyn.TypeDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Ty t = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.TypeDec r = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.TypeDec(sleft, sym(n), t, r); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("TyDec",18, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunDec ::= FUNCTION ID LPAREN TyField RPAREN TyCast EQ Exp RFunDec 
            {
              Absyn.FunctionDec RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FunctionDec r = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FunctionDec(sleft, sym(n), f, t, e, r); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("FunDec",22, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-8)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Ty ::= ID 
            {
              Absyn.Ty RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.NameTy(nleft, sym(n)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Ty",8, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Ty ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ArrayTy(sleft, sym(n)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Ty",8, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Ty ::= LBRACE TyField RBRACE 
            {
              Absyn.Ty RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		 RESULT = new Absyn.RecordTy(sleft, f); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Ty",8, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpQ ::= Exp 
            {
              Absyn.Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = e; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("ExpQ",9, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpQ ::= 
            {
              Absyn.Exp RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("ExpQ",9, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Seq ::= Exp NextSeq 
            {
              Absyn.ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.ExpList e2 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ExpList(e1, e2); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Seq",11, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Seq ::= 
            {
              Absyn.ExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Seq",11, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NextSeq ::= SEMICOLON Seq 
            {
              Absyn.ExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.ExpList s = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = s; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NextSeq",12, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NextSeq ::= 
            {
              Absyn.ExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NextSeq",12, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Args ::= Exp NextArg 
            {
              Absyn.ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.ExpList n = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ExpList(e, n); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Args",13, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Args ::= 
            {
              Absyn.ExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("Args",13, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NextArg ::= COMMA Exp NextArg 
            {
              Absyn.ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.ExpList n = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.ExpList(e, n); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NextArg",14, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-2)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NextArg ::= 
            {
              Absyn.ExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NextArg",14, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FieldExpList ::= ID EQ Exp NFieldExpList 
            {
              Absyn.FieldExpList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FieldExpList l = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FieldExpList(nleft, sym(n), e, l); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("FieldExpList",15, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FieldExpList ::= 
            {
              Absyn.FieldExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("FieldExpList",15, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NFieldExpList ::= COMMA ID EQ Exp NFieldExpList 
            {
              Absyn.FieldExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FieldExpList l = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FieldExpList(sleft, sym(n), e, l); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NFieldExpList",16, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NFieldExpList ::= 
            {
              Absyn.FieldExpList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NFieldExpList",16, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DecLst ::= Dec DecLst 
            {
              Absyn.DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.DecList l = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.DecList(d, l); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("DecLst",7, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DecLst ::= 
            {
              Absyn.DecList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("DecLst",7, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RTyDec ::= TyDec 
            {
              Absyn.TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = t; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("RTyDec",19, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RTyDec ::= 
            {
              Absyn.TypeDec RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("RTyDec",19, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RFunDec ::= FunDec 
            {
              Absyn.FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = f; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("RFunDec",23, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RFunDec ::= 
            {
              Absyn.FunctionDec RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("RFunDec",23, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TyField ::= ID COLON ID NTyField 
            {
              Absyn.FieldList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FieldList(nleft, sym(n), sym(t), f); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("TyField",21, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TyField ::= 
            {
              Absyn.FieldList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("TyField",21, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NTyField ::= COMMA ID COLON ID NTyField 
            {
              Absyn.FieldList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.FieldList(nleft, sym(n), sym(t), f); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NTyField",17, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-4)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NTyField ::= 
            {
              Absyn.FieldList RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("NTyField",17, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TyCast ::= COLON ID 
            {
              Absyn.NameTy RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grammar$stack.peek()).value;
		 RESULT = new Absyn.NameTy(nleft, sym(n)); 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("TyCast",20, ((java_cup.runtime.Symbol)CUP$Grammar$stack.elementAt(CUP$Grammar$top-1)), ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TyCast ::= 
            {
              Absyn.NameTy RESULT =null;
		 RESULT = null; 
              CUP$Grammar$result = parser.getSymbolFactory().newSymbol("TyCast",20, ((java_cup.runtime.Symbol)CUP$Grammar$stack.peek()), RESULT);
            }
          return CUP$Grammar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Grammar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Grammar$do_action(
    int                        CUP$Grammar$act_num,
    java_cup.runtime.lr_parser CUP$Grammar$parser,
    java.util.Stack            CUP$Grammar$stack,
    int                        CUP$Grammar$top)
    throws java.lang.Exception
    {
              return CUP$Grammar$do_action_part00000000(
                               CUP$Grammar$act_num,
                               CUP$Grammar$parser,
                               CUP$Grammar$stack,
                               CUP$Grammar$top);
    }
}

}
